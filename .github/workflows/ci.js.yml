# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "main" ]

env:
  CLERK_SECRET_KEY: "${{ secrets.CLERK_SECRET_KEY }}"
  CLERK_PUBLISHABLE_KEY: "${{ secrets.CLERK_PUBLISHABLE_KEY }}"
  MONGODB_URI: "${{ secrets.MONGODB_URI }}"
  WEBHOOK_SECRET: "${{ secrets.WEBHOOK_SECRET }}"
  OPENAI_API_KEY: "${{ secrets.OPENAI_API_KEY }}"
  GETIMGAI_API_KEY: "${{ secrets.GETIMGAI_API_KEY }}"
  CORS_ORIGIN: "${{ secrets.CORS_ORIGIN }}"
  FIREBASE_API_KEY: "${{ secrets.FIREBASE_API_KEY }}"
  FIREBASE_AUTH_DOMAIN: "${{ secrets.FIREBASE_AUTH_DOMAIN }}"
  FIREBASE_PROJECT_ID: "${{ secrets.FIREBASE_PROJECT_ID }}"
  FIREBASE_STORAGE_BUCKET: "${{ secrets.FIREBASE_STORAGE_BUCKET }}"
  FIREBASE_MESSAGING_SENDER_ID: "${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}"
  FIREBASE_APP_ID: "${{ secrets.FIREBASE_APP_ID }}"
  FIREBASE_MEASUREMENT_ID: "${{ secrets.FIREBASE_MEASUREMENT_ID }}"
  PORT: "${{ secrets.PORT }}"

jobs:
  build:
    runs-on: [ubuntu-latest]
    # runs-on: self-hosted # For self-hosted runners
    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
  
      - name: Build and push Docker image
        run: |
          docker build -t yosefhershberg/culinary-gpt-server:latest .
          docker push yosefhershberg/culinary-gpt-server:latest
  

  deploy:
    needs: build
    runs-on: [aws-ec2]
    steps:
      - name: Pull image from Docker Hub
        run: docker pull yosefhershberg/culinary-gpt-server:latest

      - name: Delete old container
        run: docker rm -f server-container || true

      - name: Create .env file
        env:
          PROD_ENV_FILE: ${{ secrets.PROD_ENV_FILE }}
        run: echo "${{ secrets.PROD_ENV_FILE }}" > .env

      - name: Run Docker container with environment file
        run: docker run -d -p 5000:5000 --name server-container --env-file .env culinary-gpt-server:latest
