name: Node.js CI

on:
  push:
    branches: [ "main" ]

jobs:
  test:
    runs-on: [ubuntu-latest]

    strategy:
      matrix:
        node-version: [20.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - run: npm ci
      - run: |
          touch .env
          echo "${{ secrets.PROD_ENV_FILE }}" > .env
      - run: npm run build --if-present
      - run: npm test


  # WHEN DEPLOY TO AWS ------>>>> 

  build:
    needs: test
    runs-on: [ubuntu-latest]
    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: yosefhershberg/culinary-gpt-server:latest

  deploy:
    needs: build
    runs-on: [aws-ec2]
    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Pull Docker image
        run: docker pull yosefhershberg/culinary-gpt-server:latest

      - name: Delete old container
        run: docker rm -f server-container || true

      - name: Create .env file
        env:
          PROD_ENV_FILE: ${{ secrets.PROD_ENV_FILE }}
        run: echo "${{ secrets.PROD_ENV_FILE }}" > .env

      - name: Run Docker container with environment file
        run: docker run -d -p 5000:5000 --name server-container --env-file .env yosefhershberg/culinary-gpt-server:latest

      - name: Remove dangling Docker images
        run: docker image prune -f