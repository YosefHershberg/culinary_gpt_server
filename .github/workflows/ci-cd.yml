name: CulinaryGPT serer CI/CD

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: eu-central-1
  ECR_REPOSITORY: 879381237613.dkr.ecr.eu-central-1.amazonaws.com/culinary-gpt-server
  ECS_SERVICE: arn:aws:ecs:eu-central-1:879381237613:service/culinary-gpt-cluster/culinary-gpt-service                 
  ECS_CLUSTER: arn:aws:ecs:eu-central-1:879381237613:cluster/culinary-gpt-cluster
  ECS_TASK_DEFINITION: arn:aws:ecs:eu-central-1:879381237613:task-definition/c-gpt-task-def:2
                                              
  CONTAINER_NAME: culinary-gpt-server   
                                              
jobs:
  test:
    runs-on: [ubuntu-latest]

    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - run: npm ci
      - run: |
          touch .env
          echo "${{ secrets.PROD_ENV_FILE }}" > .env
      - run: npm run build --if-present
      - run: npm test

  build_and_deploy:
    needs: test
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: latest
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true


  # WHEN DEPLOY TO AWS EC2------>>>> 

  # build:
  #   needs: test
  #   runs-on: [ubuntu-latest]
  #   steps:
  #     - name: Checkout source
  #       uses: actions/checkout@v3

  #     - name: Log in to Docker Hub
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2

  #     - name: Build and push Docker image
  #       uses: docker/build-push-action@v3
  #       with:
  #         context: .
  #         push: true
  #         tags: yosefhershberg/culinary-gpt-server:latest

  # deploy:
  #   needs: build
  #   runs-on: [aws-ec2]
  #   steps:
  #     - name: Log in to Docker Hub
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}

  #     - name: Pull Docker image
  #       run: docker pull yosefhershberg/culinary-gpt-server:latest

  #     - name: Delete old container
  #       run: docker rm -f server-container || true

  #     - name: Create .env file
  #       env:
  #         PROD_ENV_FILE: ${{ secrets.PROD_ENV_FILE }}
  #       run: echo "${{ secrets.PROD_ENV_FILE }}" > .env

  #     - name: Run Docker container with environment file
  #       run: docker run -d -p 5000:5000 --name server-container --env-file .env yosefhershberg/culinary-gpt-server:latest

  #     - name: Remove dangling Docker images
  #       run: docker image prune -f